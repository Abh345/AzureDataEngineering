{
	"name": "4_create_bronze_tables",
	"properties": {
		"folder": {
			"name": "nyc_taxi/ldw"
		},
		"content": {
			"query": "use nyc_taxi_ldw;\nIF OBJECT_ID('bronze.trip_data_green_csv') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_csv\nCREATE EXTERNAL TABLE nyc_taxi_ldw.bronze.trip_data_green_csv \n    (      vendor_id SMALLINT ,  --when creating external table .you do not have to give ordinal position \n           lpep_pickup_datetime DATETIME2(0) ,\n           lpep_dropoff_datetime DATETIME2(0) ,\n           store_and_fwd_flag VARCHAR(1500),\n           rate_code_id TINYINT,\n           pu_location_id INT,\n           do_location_id INT,\n           passenger_count TINYINT,\n           trip_distance FLOAT,\n           fare_amount FLOAT,\n           extra FLOAT,\n           mta_tax FLOAT,\n           tip_amount FLOAT,\n           tolls_amount FLOAT,\n           ehail_fee FLOAT,\n           improvement_surcharge FLOAT,\n           total_amounts FLOAT,\n           payment_type TINYINT,\n           trip_type  TINYINT,\n           congestion_surcharge FLOAT\n           )\n    WITH (\n        LOCATION = 'raw/trip_data_green_csv/**',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = cdv_file_format      \n    );\n--drop EXTERNAL TABLE nyc_taxi_ldw.bronze.trip_data_green_csv ;\nselect top 10 * from bronze.trip_data_green_csv;\n\n\n--we want to drop table if exists \n\n--way-1\nIF EXISTS(select * from sys.external_tables where name ='taxi_zone')\n    DROP EXTERNAL TABLE bronze.taxi_zone\n\n--way-2\nIF OBJECT_ID('bronze.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.taxi_zone\n\n--- using reject option \n---only available on paraser version 1.0 and for delimited text files (, or tab sperated values)\n\nIF NOT EXISTS(select * from sys.external_tables where name ='taxi_zone')\n    CREATE EXTERNAL TABLE  bronze.taxi_zone \n        (   location_id SMALLINT , --renaming column using ordinal position \n            borough VARCHAR(15) ,\n            zone VARCHAR(50) ,\n            service_zone VARCHAR(15) \n            )\n        WITH (\n            LOCATION = 'raw/taxi_zone.csv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = cdv_file_format_pv1,\n            REJECT_VALUE=10,\n            REJECTED_ROW_LOCATION='rejections/taxi_zone'\n\n        );\nSELECT * from bronze.taxi_zone; ---once we run this select query it will create folders \n--under rejections folder with records that have invalid formats/records. \n\n--create external table for calander file \nIF OBJECT_ID('bronze.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.calendar\nCREATE EXTERNAL TABLE  bronze.calendar \n        (   date_key INT ,\n           date DATE ,\n           year SMALLINT ,\n           month TINYINT ,\n           day TINYINT ,\n           day_name VARCHAR(20) ,\n           day_of_year SMALLINT ,\n           week_of_month TINYINT ,\n           week_of_year TINYINT ,\n           month_name VARCHAR(20),\n           year_month INT ,\n           year_week INT\n            )\n        WITH (\n            LOCATION = 'raw/calendar.csv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = cdv_file_format_pv1,\n            REJECT_VALUE=10,\n            REJECTED_ROW_LOCATION='rejections/calander'\n\n        );\nselect * from bronze.calendar;\n--create vendor table \nIF OBJECT_ID('bronze.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vendor\nCREATE EXTERNAL TABLE  bronze.vendor \n        (   vendor_id TINYINT,\n            vendor_name VARCHAR(50)\n            )\n        WITH (\n            LOCATION = 'raw/vendor.csv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = cdv_file_format_pv1,\n            REJECT_VALUE=10,\n            REJECTED_ROW_LOCATION='rejections/vendor'\n        );\nselect * from bronze.vendor;\n\n--create trip_type table \n\nIF OBJECT_ID('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type\nCREATE EXTERNAL TABLE  bronze.trip_type \n        (   \n           trip_type TINYINT,\n           trip_type_desc VARCHAR(50)\n        )\n        WITH (\n            LOCATION = 'raw/trip_type.tsv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = tsv_file_format, --working for parser version 2.0 but throwing error on paser version 1.0\n            REJECT_VALUE=10,\n            REJECTED_ROW_LOCATION='rejections/trip_type'\n\n        );\nselect * from bronze.trip_type;\n\n\n--create exteranl table for nyc_trip_data_parquet\n--when dealing with PARQUET we should not change the column name of table .otherwise it will display NULLs\nIF OBJECT_ID('bronze.trip_data_green_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_parquet\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet \n    (      VendorID INT ,  --when creating external table .you do not have to give ordinal position \n           lpep_pickup_datetime DATETIME2(0) ,\n           lpep_dropoff_datetime DATETIME2(0) ,\n           store_and_fwd_flag VARCHAR(1500),\n           RatecodeID INT,\n           PULocationID INT,  --do not changethe actual column name in parquet otherwise throws nulls.\n           DOLocationID INT,\n           passenger_count INT,\n           trip_distance FLOAT,\n           fare_amount FLOAT,\n           extra FLOAT,\n           mta_tax FLOAT,\n           tip_amount FLOAT,\n           tolls_amount FLOAT,\n           ehail_fee INT,\n           improvement_surcharge FLOAT,\n           total_amount FLOAT ,\n           payment_type TINYINT,\n           trip_type  TINYINT,\n           congestion_surcharge FLOAT\n           )\n    WITH (\n        LOCATION = 'raw/trip_data_green_parquet/**',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format      \n    );\nselect TOP 100 * from nyc_taxi_ldw.bronze.trip_data_green_parquet where VendorID  is not null order by VendorID asc;\n\n--creating external table for trip_data_green_delta-delta \nIF OBJECT_ID('bronze.trip_data_green_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_delta\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta \n    (      VendorID INT ,  --when creating external table .you do not have to give ordinal position.\n    --do not changethe actual column name in delta otherwise throws nulls.\n           lpep_pickup_datetime DATETIME2(0) ,\n           lpep_dropoff_datetime DATETIME2(0) ,\n           store_and_fwd_flag VARCHAR(1500),\n           RatecodeID INT,\n           PULocationID INT,  --do not changethe actual column name in delta otherwise throws nulls.\n           DOLocationID INT,\n           passenger_count INT,\n           trip_distance FLOAT,\n           fare_amount FLOAT,\n           extra FLOAT,\n           mta_tax FLOAT,\n           tip_amount FLOAT,\n           tolls_amount FLOAT,\n           ehail_fee INT,\n           improvement_surcharge FLOAT,\n           total_amount FLOAT ,\n           payment_type TINYINT,\n           trip_type  TINYINT,\n           congestion_surcharge FLOAT\n           )\n    WITH (\n        --LOCATION = 'raw/trip_data_green_delta/**',-- we cannot query folders and subfolders in delta with wildcards\n        LOCATION = 'raw/trip_data_green_delta/',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = delta_file_format      \n    );\nselect top 10 * from nyc_taxi_ldw.bronze.trip_data_green_delta ;\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "nyc_taxi_ldw",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}