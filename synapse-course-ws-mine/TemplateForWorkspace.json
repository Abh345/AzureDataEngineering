{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-course-ws-mine"
		},
		"ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_serverless_sql_pool_db_nyc_taxi_ldw'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-ws-mine-ondemand.sql.azuresynapse.net,1433;Initial Catalog=nyc_taxi_ldw"
		},
		"synapse-course-ws-mine-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-course-ws-mine-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-ws-mine.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"lssynapsecoursedl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapseciurseadls.dfs.core.windows.net/"
		},
		"synapse-course-ws-mine-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapseciurseadls.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Main_trigger_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MainPipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "execute_taxi_data_piplines",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-03T12:56:22Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/execute_taxi_data_piplines')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/execute_taxi_data_piplines')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "create_silver_table_pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_tables_usp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "create_silver_table_trip_data_green",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pls_create_sliver_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "create_gold_table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "create_silver_table_trip_data_green",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "create_silver_table_pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pls_create_gold_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-03T12:56:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_tables_usp')]",
				"[concat(variables('workspaceId'), '/pipelines/pls_create_sliver_trip_data_green')]",
				"[concat(variables('workspaceId'), '/pipelines/pls_create_gold_trip_data_green')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables_non_prod')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "delete_taxi_zone_folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_nyc_taxi_data_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"p_folder_path": {
										"value": "@pipeline().parameters.folder_path",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "create_silver_taxi_zone",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "delete_taxi_zone_folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@pipeline().parameters.usp_name",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"folder_path": {
						"type": "string"
					},
					"usp_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-03T12:56:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables_usp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "read silver tables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('folder_path_usp_name_array')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "delete_silver_tables_folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@item().folder_name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "create_silver_tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "delete_silver_tables_folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"folder_path_usp_name_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_name": "silver/calendar",
								"usp_name": "silver.usp_calendar"
							},
							{
								"folder_name": "silver/taxi_zone",
								"usp_name": "silver.usp_taxi_zone"
							},
							{
								"folder_name": "silver/payment_type",
								"usp_name": "silver.usp_payment_type"
							},
							{
								"folder_name": "silver/rate_code",
								"usp_name": "silver.usp_rate_code"
							},
							{
								"folder_name": "silver/trip_type",
								"usp_name": "silver.usp_trip_type"
							},
							{
								"folder_name": "silver/vendor",
								"usp_name": "silver.usp_vendor"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-03T12:45:58Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone_non_prod')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "delete_taxi_zone_folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_sliver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "create_sliver_taxi_zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "delete_taxi_zone_folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "if OBJECT_ID('silver.taxi_zone') is not null\n    DROP EXTERNAL TABLE silver.taxi_zone;"
								},
								{
									"type": "NonQuery",
									"text": "CREATE EXTERNAL TABLE silver.taxi_zone\n    WITH\n    (\n        data_source=nyc_taxi_src,\n        location='silver/taxi_zone',\n        file_format=parquet_file_format,\n    )\nAS\nselect * FROM bronze.taxi_zone\n;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-03T12:56:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_sliver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pls_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "get the year and month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw;\n\nselect distinct year,month from silver.vw_silver_trip_data_green;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "read every partitions",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get the year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get the year and month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "delete trip_data_green folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "gold/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "usp_gold_trip_data_green",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "delete trip_data_green folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[gold].[usp_gold_trip_data_green]",
										"storedProcedureParameters": {
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											},
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Create gold view trip data green bus req 1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "usp_gold_trip_data_green",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "USE nyc_taxi_ldw;"
											},
											{
												"type": "Query",
												"text": "DROP VIEW IF EXISTS gold.vw_gold_trip_data_green_bus_req_1;"
											},
											{
												"type": "Query",
												"text": "CREATE VIEW gold.vw_gold_trip_data_green_bus_req_1\nAS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/**',\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) AS [result];"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"x": {
						"type": "String"
					},
					"f": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-03T12:41:51Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pls_create_sliver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "get the year and month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw;\n\nselect distinct year,month from bronze.vw_trip_data_green_csv;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "read every partitions",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get the year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get the year and month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "delete trip_data_green folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@concat('silver/trip_data_green_csv','/year=',item().year,'/month=',item().month)",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "usp_sliver_trip_data_green",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "delete trip_data_green folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_sliver_trip_data_green]",
										"storedProcedureParameters": {
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											},
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Create silver view trip data green",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "usp_sliver_trip_data_green",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "USE nyc_taxi_ldw;"
											},
											{
												"type": "Query",
												"text": "DROP VIEW IF EXISTS silver.vw_silver_trip_data_green;"
											},
											{
												"type": "Query",
												"text": "CREATE VIEW silver.vw_silver_trip_data_green\nAS\nSELECT\n    VendorID as vendor_id  ,  \n           lpep_pickup_datetime  ,\n           lpep_dropoff_datetime  ,\n           store_and_fwd_flag ,\n           RatecodeID as rate_code_id,\n           PULocationID as pu_location_id,  \n           DOLocationID as do_location_id,\n           passenger_count ,\n           trip_distance ,\n           fare_amount ,\n           extra ,\n           mta_tax ,\n           tip_amount ,\n           tolls_amount ,\n           ehail_fee ,\n           improvement_surcharge ,\n           total_amount ,\n           payment_type ,\n           trip_type ,\n           congestion_surcharge,result.filepath(1) as year,result.filepath(2) as month\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green_csv/year=*/month=*/**',\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) AS [result];"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"x": {
						"type": "String"
					},
					"f": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-03T11:44:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_nyc_taxi_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lssynapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lssynapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_sliver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lssynapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lssynapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lssynapsecoursedl')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('lssynapsecoursedl_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-ws-mine-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-course-ws-mine-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-ws-mine-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-course-ws-mine-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_check_for_duplicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "--check for dupliactes \nuse nyc_taxi_discovery;\nSELECT\n    location_id,COUNT_BIG(1) as occurances \nFROM\n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    WITH (\n           location_id SMALLINT 1,\n           borough VARCHAR(15) 2,\n           zone VARCHAR(50) 3,\n           service_zone VARCHAR(15) 4\n\n         )AS [result]\ngroup by location_id\nhaving COUNT_BIG(1)>1;\n\n\n--select taxi_zone data\nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \nWITH (\n           location_id SMALLINT 1, --renaming column using ordinal position \n           borough VARCHAR(15) 2,\n           zone VARCHAR(50) 3,\n           service_zone VARCHAR(15) 4\n\n         )AS [results]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n--if EXISTS (select * from sys.external_tables where name ='trip_type')\n  --  DROP EXTERNAL TABLE silver.trip_type\n\nif OBJECT_ID('silver.trip_type') is not null\n    DROP EXTERNAL TABLE silver.trip_type\nGO\nCREATE EXTERNAL TABLE silver.trip_type\n    WITH\n    (\n        data_source=nyc_taxi_src,\n        location='silver/trip_type',\n        file_format=parquet_file_format,\n    )\nAS\nselect * FROM bronze.trip_type\nGO\nselect * from silver.trip_type\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_usp_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_defined_stored_procedure"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\nCREATE OR ALTER PROCEDURE silver.usp_vendor\nAS\nBEGIN\n    if OBJECT_ID('silver.vendor') is not null\n        DROP EXTERNAL TABLE silver.vendor;\n    CREATE EXTERNAL TABLE silver.vendor\n        WITH\n        (\n            data_source=nyc_taxi_src,\n            location='silver/vendor',\n            file_format=parquet_file_format,\n        )\n    AS\n    select * FROM bronze.vendor;\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n--if EXISTS (select * from sys.external_tables where name ='vendor')\n  --  DROP EXTERNAL TABLE silver.vendor\nGo\nif OBJECT_ID('silver.vendor') is not null\n   DROP EXTERNAL TABLE silver.vendor  -- here object_id will be always a good choice as we have the schema info. \nGO  --schema info means silver.vendor becasue if we have two externa, tables under two diff schemas\n-- then in that case it will throw error like not alowed to delete table if we use /*\n--if EXISTS (select * from sys.external_tables where name ='vendor')\n  --  DROP EXTERNAL TABLE silver.taxi_zone*/\n\nCREATE EXTERNAL TABLE silver.vendor\n    WITH\n    (\n        data_source=nyc_taxi_src,\n        location='silver/vendor',\n        file_format=parquet_file_format,\n    )\nAS\nselect * FROM bronze.vendor\nGO\nselect * from silver.vendor\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_data_quality_check')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "--data quality check for total_amount column \nuse nyc_taxi_discovery;\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n--checking qulaity of total_amount column \n--count() never counts nulls \nSELECT\n    count(1) as total_records,\n    count(total_amount) as total_count_of_total_amount_with_non_nulls,\n    min(total_amount) as min_total_amount,\n    max(total_amount) as max_total_amount,\n    avg(total_amount) as avg_total_amount\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n\n\n--data quality issues with payment_type\nSELECT\n    payment_type,count(1) as no_of_records\n\n    FROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\ngroup by payment_type\norder by payment_type;\n\n--now we can actaully replace nulls of payment_type to 'Unknown' type\nselect fixed_nulls_payment_type_col as payment_type,count(1) as records_count\nFROM\n(\nSELECT\n    VendorID,COALESCE(payment_type,5) as fixed_nulls_payment_type_col\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) as d\n)  as f\ngroup by fixed_nulls_payment_type_col \norder by fixed_nulls_payment_type_col;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n--this is not effective for partioned datas so in that case we should use SPARK POOL .\n--here CETAS will not give ability to write data into seperate partions or into diff folders.\n/*if OBJECT_ID('silver.trip_data_green_csv') is not null\n   DROP EXTERNAL TABLE silver.trip_data_green_csv_2020_01  \nGO*/\n--CREATE EXTERNAL TABLE silver.trip_data_green_csv\n    --WITH\n    --(\n        --data_source=nyc_taxi_src,\n      --  location='silver/trip_data_green_csv',\n    --    file_format=parquet_file_format,\n  --  )\n--AS\n--select * FROM bronze.vw_trip_data_green_csv\n--GO\n--select top 10 * from silver.trip_data_green_csv\n--GO\n\n\nEXEC silver.usp_sliver_trip_data_green '2020','01'\nEXEC silver.usp_sliver_trip_data_green '2020','02'\nEXEC silver.usp_sliver_trip_data_green '2020','03'\nEXEC silver.usp_sliver_trip_data_green '2020','04'\nEXEC silver.usp_sliver_trip_data_green '2020','05'\nEXEC silver.usp_sliver_trip_data_green '2020','06'\nEXEC silver.usp_sliver_trip_data_green '2020','07'\nEXEC silver.usp_sliver_trip_data_green '2020','08'\nEXEC silver.usp_sliver_trip_data_green '2020','09'\nEXEC silver.usp_sliver_trip_data_green '2020','10'\nEXEC silver.usp_sliver_trip_data_green '2020','11'\nEXEC silver.usp_sliver_trip_data_green '2020','12'\nEXEC silver.usp_sliver_trip_data_green '2021','01'\nEXEC silver.usp_sliver_trip_data_green '2021','02'\nEXEC silver.usp_sliver_trip_data_green '2021','03'\nEXEC silver.usp_sliver_trip_data_green '2021','04'\nEXEC silver.usp_sliver_trip_data_green '2021','05'\nEXEC silver.usp_sliver_trip_data_green '2021','06'\nEXEC silver.usp_sliver_trip_data_green '2021','07'\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_join_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "--identify the trips from each borough(we have to join trip_data with taxi_zone using location_id column)\nuse nyc_taxi_discovery;\n--Table 1\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [t1]\n--checking if our joined key have any nulls or not \nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [t1]\nwhere PULocationID is NULL;\n--Table-1 and Table-2 joining \nwith cte AS(\nSELECT\n     *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [t1]\nJOIN\n(select * from \n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) WITH(\n           location_id SMALLINT 1, --renaming column using ordinal position \n           borough VARCHAR(15) 2,\n           zone VARCHAR(50) 3,\n           service_zone VARCHAR(15) 4\n           )AS [t2]) as d\non t1.PULocationID=d.location_id\n)\nSELECT borough,COUNT(1) as records from cte \ngroup by borough\nORDER BY records \n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_create_sliver_views_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\nDROP VIEW IF EXISTS silver.vw_silver_trip_data_green\nGO\nCREATE VIEW silver.vw_silver_trip_data_green\nAS\nSELECT\n    VendorID as vendor_id  ,  \n           lpep_pickup_datetime  ,\n           lpep_dropoff_datetime  ,\n           store_and_fwd_flag ,\n           RatecodeID as rate_code_id,\n           PULocationID as pu_location_id,  \n           DOLocationID as do_location_id,\n           passenger_count ,\n           trip_distance ,\n           fare_amount ,\n           extra ,\n           mta_tax ,\n           tip_amount ,\n           tolls_amount ,\n           ehail_fee ,\n           improvement_surcharge ,\n           total_amount ,\n           payment_type ,\n           trip_type ,\n           congestion_surcharge,result.filepath(1) as year,result.filepath(2) as month\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green_csv/year=*/month=*/**',\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGO\n--cross check records with bronze layer \nselect top 10 *  from silver.vw_silver_trip_data_green WHERE year=2020 and month =01;\n--select count(*) from bronze.vw_trip_data_green_csv  WHERE year=2020 and month =01;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_simple_transformations')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n--Table 1\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [t1]\n--checking if ou\n--Number of trips made by durations in minutes\nSELECT\n    top 100 lpep_pickup_datetime,lpep_dropoff_datetime,DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime) as no_of_minutes\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [t1];\n\n--Number of trips made by durations in hours\nSELECT\n    DATEDIFF(hour,lpep_pickup_datetime,lpep_dropoff_datetime) as from_hour,\n    DATEDIFF(hour,lpep_pickup_datetime,lpep_dropoff_datetime)+1 as to_hour,\n    count(*) as no_of_trips\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [t1]\nwhere lpep_pickup_datetime<lpep_dropoff_datetime  -- this help to filter unwanted values before grouping the trips count\ngroup by DATEDIFF(hour,lpep_pickup_datetime,lpep_dropoff_datetime),\n    DATEDIFF(hour,lpep_pickup_datetime,lpep_dropoff_datetime)+1\norder by from_hour,to_hour;\n\n--others \n\nSELECT\n    DATEDIFF(MINUTE,lpep_pickup_datetime,lpep_dropoff_datetime)/60 as from_hour,\n    DATEDIFF(MINUTE,lpep_pickup_datetime,lpep_dropoff_datetime)/60 +1 as to_hour,\n    count(*) as no_of_trips\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [t1]\ngroup by DATEDIFF(MINUTE,lpep_pickup_datetime,lpep_dropoff_datetime)/60,\n    DATEDIFF(MINUTE,lpep_pickup_datetime,lpep_dropoff_datetime)/60+1\norder by from_hour,to_hour;\n\n--hours wise no of trips completed \nSELECT\n    DATEDIFF(hour,lpep_pickup_datetime,lpep_dropoff_datetime) as hours_to_complete,\n    count(1) as no_of_trips\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [t1]\ngroup by DATEDIFF(hour,lpep_pickup_datetime,lpep_dropoff_datetime)\norder by hours_to_complete desc;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_business_req_assingment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\nwith cte AS(\nSELECT\n      *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2021/month=01',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [t1]\nJOIN\n(select  * from \n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) WITH(\n           location_id SMALLINT 1, --renaming column using ordinal position \n           borough VARCHAR(15) 2,\n           zone VARCHAR(50) 3,\n           service_zone VARCHAR(15) 4\n           )AS [t2]) as d\non t1.PULocationID=d.location_id\n)\nselect final_table.*,\ncast(ROUND(100.0*total_cash_trips/total_trip,2) as DECIMAL(9,2)) \nas cash_trip_percentage,\ncast(ROUND(100.0*total_credit_card_trips/total_trip,2) as DECIMAL(9,2)) \nas credit_card_trip_percentage\n FROM\n(select borough,\n count(*) as total_trip,\n count(case when payment_type=1 then 1 end) as total_credit_card_trips,\n count(case when payment_type=2 then 1 end) as total_cash_trips\nfrom cte\nwhere payment_type=1 or payment_type=2 \ngroup by borough\n) as final_table;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_gold_trip_data_green_bus_req_1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\n/*with cte AS\n(    \nselect j1.payment_type,j1.borough, j1.trip_date,j1.year,j1.month,j2.day_name,\ncase when day_name in('Sunday','Saturday') then 'Y' else 'N' end as trip_day_weekend_ind from \n(\nselect payment_type,borough,CAST(lpep_pickup_datetime AS DATE) as trip_date,year,month FROM\n(SELECT * FROM silver.vw_silver_trip_data_green) as t1\nJOIN\n(select * from silver.taxi_zone) as d\non t1.pu_location_id=d.location_id\n) as j1 \ninner join \n(select year as y,month as m, day_name,date from silver.calendar) as j2 \non j1.trip_date=j2.date\n)\n select borough,day_name,trip_date,year,month,\n count(*) as total_trip,\n count(case when payment_type=1 then 1 end) as total_credit_card_trips,\n count(case when payment_type=2 then 1 end) as total_cash_trips,\n trip_day_weekend_ind\nfrom cte\nwhere payment_type=1 or payment_type=2  --optimization as we filtered out payment_type eailer for 1 and 2 so extra aggrtions will not happen \ngroup by borough,day_name,trip_date,year,month,trip_day_weekend_ind\nhaving year =2020 and month =01\n*/\n\n\nEXEC gold.usp_gold_trip_data_green '2020','01'\n\nEXEC gold.usp_gold_trip_data_green '2020','02'\nEXEC gold.usp_gold_trip_data_green '2020','03'\nEXEC gold.usp_gold_trip_data_green '2020','04'\nEXEC gold.usp_gold_trip_data_green '2020','05'\nEXEC gold.usp_gold_trip_data_green '2020','06'\nEXEC gold.usp_gold_trip_data_green '2020','07'\nEXEC gold.usp_gold_trip_data_green '2020','08'\nEXEC gold.usp_gold_trip_data_green '2020','09'\nEXEC gold.usp_gold_trip_data_green '2020','10'\nEXEC gold.usp_gold_trip_data_green '2020','11'\nEXEC gold.usp_gold_trip_data_green '2020','12'\nEXEC gold.usp_gold_trip_data_green '2021','01'\nEXEC gold.usp_gold_trip_data_green '2021','02'\nEXEC gold.usp_gold_trip_data_green '2021','03'\nEXEC gold.usp_gold_trip_data_green '2021','04'\nEXEC gold.usp_gold_trip_data_green '2021','05'\nEXEC gold.usp_gold_trip_data_green '2021','06'    --use ctrl_h to find and replace quickly\nEXEC gold.usp_gold_trip_data_green '2021','07'\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_create_gold_view_trip_data_green_bus_req_1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "-- This is auto-generated code\nUSE nyc_taxi_ldw;\nDROP VIEW IF EXISTS gold.vw_gold_trip_data_green_bus_req_1\nGO\nCREATE VIEW gold.vw_gold_trip_data_green_bus_req_1\nAS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/**',\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGO\n\nSELECT top 10 * from gold.vw_gold_trip_data_green_bus_req_1 where year=2020 and month =01",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/16_gold_trip_data_green_bus_req_2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\n\nGO\n/*\nwith cte AS\n(    \nselect j1.payment_type,j1.borough, \nj1.trip_date,j1.year,j1.month,\nj2.day_name,j1.trip_duration,j1.trip_distance,j1.fare_amount,j1.trip_type,\ncase when day_name in('Sunday','Saturday') then 'Y' else 'N' end as trip_day_weekend_ind from \n(\nselect payment_type,borough,CAST(lpep_pickup_datetime AS DATE) as trip_date,year,month,trip_distance,total_amount,fare_amount,\nDATEDIFF(MINUTE,lpep_pickup_datetime,lpep_dropoff_datetime) as trip_duration,trip_type\nFROM\n(SELECT * FROM silver.vw_silver_trip_data_green) as t1\nJOIN\n(select * from silver.taxi_zone) as d\non t1.pu_location_id=d.location_id\n) as j1 \njoin \n(select year as y,month as m, day_name,date from silver.calendar) as j2 \non j1.trip_date=j2.date\n)\nSELECT a1.year\n,a1.month \n,a1.borough\n,a1.trip_date\n,a1.day_name as trip_day\n,a1.trip_day_weekend_ind\n,SUM(case when b1.trip_type_desc='Street-hail' then 1 else 0 end) as street_hail_trip_count\n,SUM(case when b1.trip_type_desc='Dispatch' then 1 end) as dispatch_tirp_count\n,count(case when payment_type=1 then 1 end) as total_credit_card_trips\n,count(case when payment_type=2 then 1 end) as total_cash_trips\n,sum(a1.trip_duration) as total_trip_duration\n,sum(a1.trip_distance) as total_trip_distance \n,sum(a1.fare_amount) as total_fare_amount\nfrom cte as a1 join silver.trip_type as b1 on a1.trip_type=b1.trip_type\nwhere payment_type=1 or payment_type=2 \ngroup by a1.borough,\na1.trip_date,\na1.day_name,\na1.trip_day_weekend_ind,\na1.year,\na1.month\n--having year =2020 and month =01 --for exmaple for partition purning \n*/\n\n\nEXEC gold.usp_gold_trip_data_green_1 '2020','01'\nEXEC gold.usp_gold_trip_data_green_1 '2020','02'\nEXEC gold.usp_gold_trip_data_green_1 '2020','03'\nEXEC gold.usp_gold_trip_data_green_1 '2020','04'\nEXEC gold.usp_gold_trip_data_green_1 '2020','05'\nEXEC gold.usp_gold_trip_data_green_1 '2020','06'\nEXEC gold.usp_gold_trip_data_green_1 '2020','07'\nEXEC gold.usp_gold_trip_data_green_1 '2020','08'\nEXEC gold.usp_gold_trip_data_green_1 '2020','09'\nEXEC gold.usp_gold_trip_data_green_1 '2020','10'\nEXEC gold.usp_gold_trip_data_green_1 '2020','11'\nEXEC gold.usp_gold_trip_data_green_1 '2020','12'\nEXEC gold.usp_gold_trip_data_green_1 '2021','01'\nEXEC gold.usp_gold_trip_data_green_1 '2021','02'\nEXEC gold.usp_gold_trip_data_green_1 '2021','03'\nEXEC gold.usp_gold_trip_data_green_1 '2021','04'\nEXEC gold.usp_gold_trip_data_green_1 '2021','05'\nEXEC gold.usp_gold_trip_data_green_1 '2021','06'    --use ctrl_h to find and replace quickly\nEXEC gold.usp_gold_trip_data_green_1 '2021','07'\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/17_create_gold_view_trip_data_green_bus_req_2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "-- This is auto-generated code\nUSE nyc_taxi_ldw;\nDROP VIEW IF EXISTS gold.vw_gold_trip_data_green_bus_req_2\nGO\nCREATE VIEW gold.vw_gold_trip_data_green_bus_req_2\nAS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green_2/**',\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\nGO\n\nSELECT * from gold.vw_gold_trip_data_green_bus_req_2 where year=2020 and month =05",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_databases')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "/*USE MASTER;\nCREATE DATABASE nyc_taxi_ldw;\none time activity*/\n\nuse nyc_taxi_ldw\nGO\nALTER DATABASE nyc_taxi_ldw COLLATE Latin1_General_100_BIN2_UTF8\nGO\nCREATE SCHEMA bronze\nGO\nCREATE SCHEMA silver\nGO\nCREATE SCHEMA gold",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nuse nyc_taxi_discovery;\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) AS [result]\n--examine data type of dataset \n--using strored procedure .here we will see datatypes allocated by synapse only .\nEXEC sp_describe_first_result_set N'SELECT\n    * \nFROM\n    OPENROWSET(\n        BULK ''https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR='','',\n        ROWTERMINATOR=''\\n''\n    ) \n    WITH (\n           LocationID SMALLINT,\n           Borough VARCHAR(15),\n           Zone VARCHAR(50),\n           service_zone VARCHAR(15)\n\n         )AS [result]'\n\n-- max length of each column of dataset \nSELECT\n    max(LEN(LocationID)) as max_LocationID,\n    max(LEN(Borough)) as max_Borough,\n    max(LEN(Zone)) as max_Zone,\n    max(LEN(service_zone)) as max_service_zone\nFROM\n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) AS [result]\n\n--- specify the data type explicitly \nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    WITH (\n           LocationID SMALLINT,\n           Borough VARCHAR(15),\n           Zone VARCHAR(50),\n           service_zone VARCHAR(15)\n\n         )AS [result]\n\n-- specify the collation \n--check collections applied on database\nselect name ,collation_name from sys.databases;\n--column level collation :\n--Latin1_General_100_CI_AS_SC_UTF8\n\nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    WITH (\n           LocationID SMALLINT ,\n           Borough VARCHAR(15) COLLATE Latin1_General_100_CI_AS_SC_UTF8,\n           Zone VARCHAR(50) COLLATE Latin1_General_100_CI_AS_SC_UTF8,\n           service_zone VARCHAR(15) COLLATE Latin1_General_100_CI_AS_SC_UTF8\n\n         )AS [result]\n\n--Database level collation :\n--check we should run after implemnting collation :\nselect name ,collation_name from sys.databases;\n\n--create database for nyc_taxi_discovery\ncreate DATABASE nyc_taxi_discovery;\nuse nyc_taxi_discovery;\nALTER DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AS_SC_UTF8; \n--once we done with colltion on database level then no column level collection needs to be specified\nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \n    WITH (\n           LocationID SMALLINT ,\n           Borough VARCHAR(15),\n           Zone VARCHAR(50),\n           service_zone VARCHAR(15)\n\n         )AS [result]\n\n\n\n--- reading data from none header file \nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) WITH (\n             -- here we are just doing select desired columns as req. using WITH \n           service_zone VARCHAR(15) 4,\n           Zone VARCHAR(50) 3\n         )\n    AS [result]\n\n--- renamin the columns as per standards \nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \nWITH (\n           location_id SMALLINT 1,\n           borough VARCHAR(15) 2,\n           zone VARCHAR(50) 3,\n           service_zone VARCHAR(15) 4\n\n         )AS [results]\n\n\n--- create extreanl data source \nCREATE EXTERNAL data SOURCE nyc_taxi_data_raw\nwith(\n    LOCATION='https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/'\n) \n--similary we should create EXTRENAL DATA SOURCE FOR \"Silver\" and \"Gold\" as well.\n--- query using data_source paramater in openrowset() slight parameterizations\n--external data source helps to make query more switcable bw prod ,test, dev Env. \nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \nWITH (\n           location_id SMALLINT 1, --renaming column using ordinal position \n           borough VARCHAR(15) 2,\n           zone VARCHAR(50) 3,\n           service_zone VARCHAR(15) 4\n\n         )AS [results]\n\n---query external data source \nselect name,location from sys.external_data_sources;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_sliver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_defined_stored_procedure"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\nCREATE or ALTER PROCEDURE silver.usp_sliver_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS \nBEGIN\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX)\n    \n    SET @create_sql_stmt='CREATE EXTERNAL TABLE silver.trip_data_green_'+@year+'_'+@month+'\nWITH\n    (\n        data_source=nyc_taxi_src,\n        location=''silver/trip_data_green_csv/year='+@year+'/month='+@month+''',\n        file_format=parquet_file_format,\n    )\nAS\nselect * from bronze.vw_trip_data_green_csv where year='+@year+'and month ='+@month;\nEXEC sp_executesql @create_sql_stmt\n\nSET @drop_sql_stmt='DROP EXTERNAL TABLE silver.trip_data_green_'+@year+'_'+@month;\nEXEC sp_executesql @drop_sql_stmt\nEND\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_extrenal_data_source')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\nif not EXISTS (SELECT  * from sys.external_data_sources where name ='nyc_taxi_src') --re runnable script \n    CREATE EXTERNAL DATA SOURCE nyc_taxi_src\n    WITH\n    ( LOCATION = 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data'\n    );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calander')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'calendar.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) \nWITH (\n           date_key INT 1,\n           date DATE 2,\n           year SMALLINT 3,\n           month TINYINT 4,\n           day TINYINT 5,\n           day_name VARCHAR(20) 6,\n           day_of_year SMALLINT 7,\n           week_of_month TINYINT 8,\n           week_of_year TINYINT 9,\n           month_name VARCHAR(20) 10,\n           year_month INT 11,\n           year_week INT 12\n         )AS [results]\n\n--checking datatype detected by synapse before explicit with clause datatype defination \n--using strored procedure .here we will see datatypes allocated by synapse only .\nEXEC sp_describe_first_result_set N'\nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK ''calendar.csv'',\n        DATA_SOURCE=''nyc_taxi_data_raw'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        FIRSTROW = 2,\n        FIELDTERMINATOR='','',\n        ROWTERMINATOR=''\\n''\n    ) as r'\n\n\n--change dataType using cast() instead of with clause\nEXEC sp_describe_first_result_set N'\nSELECT\n    CAST(date_key as int) as x,cast(date as date) as y\nFROM\n    OPENROWSET(\n        BULK ''calendar.csv'',\n        DATA_SOURCE=''nyc_taxi_data_raw'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR='','',\n        ROWTERMINATOR=''\\n''\n    ) as r'\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_list_of_usps')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_defined_stored_procedure"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\nselect * from INFORMATION_SCHEMA.ROUTINES;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_external_file_format')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "-- Create an external file format for DELIMITED (CSV/TSV) files.\nuse nyc_taxi_ldw;\nif not EXISTS(select * from sys.external_file_formats where name='cdv_file_format')\n    CREATE EXTERNAL FILE FORMAT cdv_file_format\n    WITH (\n            FORMAT_TYPE = DELIMITEDTEXT\n        , FORMAT_OPTIONS ( \n        FIELD_TERMINATOR = ','\n        , STRING_DELIMITER = '\"'\n        , FIRST_ROW = 2 -- ONLY AVAILABLE FOR AZURE SYNAPSE ANALYTICS\n        --, DATE_FORMAT = datetime_format\n        , USE_TYPE_DEFAULT = FALSE\n        , ENCODING = 'UTF8'\n        , PARSER_VERSION = '2.0'\n        ));\n\n--handling rejected values (with csv)\nif not EXISTS(select * from sys.external_file_formats where name='cdv_file_format_pv1')\n    CREATE EXTERNAL FILE FORMAT cdv_file_format_pv1\n    WITH (\n            FORMAT_TYPE = DELIMITEDTEXT\n        , FORMAT_OPTIONS ( \n        FIELD_TERMINATOR = ','\n        , STRING_DELIMITER = '\"'\n        , FIRST_ROW = 2 -- ONLY AVAILABLE FOR AZURE SYNAPSE ANALYTICS\n        --, DATE_FORMAT = datetime_format\n        , USE_TYPE_DEFAULT = FALSE\n        , ENCODING = 'UTF8'\n        , PARSER_VERSION = '1.0'\n        ));\n--handling rejected values (with tsv)\n--parser version 2.0\nif not EXISTS(select * from sys.external_file_formats where name='tsv_file_format')\n    CREATE EXTERNAL FILE FORMAT tsv_file_format\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT\n        , FORMAT_OPTIONS ( \n        FIELD_TERMINATOR = '\\t'\n        , STRING_DELIMITER = '\"'\n        , FIRST_ROW = 2 -- ONLY AVAILABLE FOR AZURE SYNAPSE ANALYTICS\n        --, DATE_FORMAT = datetime_format\n        , USE_TYPE_DEFAULT = FALSE\n        , ENCODING = 'UTF8'\n        , PARSER_VERSION = '2.0'\n        ));\n\n--parser version 1.0\nif not EXISTS(select * from sys.external_file_formats where name='tsv_file_format_pv1')\n    CREATE EXTERNAL FILE FORMAT tsv_file_format_pv1\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT\n        , FORMAT_OPTIONS ( \n        FIELD_TERMINATOR = '\\t'\n        , STRING_DELIMITER = '\"'\n        , FIRST_ROW = 2 -- ONLY AVAILABLE FOR AZURE SYNAPSE ANALYTICS\n        --, DATE_FORMAT = datetime_format\n        , USE_TYPE_DEFAULT = FALSE\n        , ENCODING = 'UTF8'\n        , PARSER_VERSION = '1.0'\n        ));\n--create parquet_file_format\nif not EXISTS(select * from sys.external_file_formats where name='parquet_file_format')\n    CREATE EXTERNAL FILE FORMAT parquet_file_format\n    WITH (\n        FORMAT_TYPE = PARQUET,\n        DATA_COMPRESSION='org.apache.hadoop.io.compress.SnappyCodec'\n        );\n\n--create delta file format \nif not EXISTS(select * from sys.external_file_formats where name='delta_file_format')\n    CREATE EXTERNAL FILE FORMAT delta_file_format\n    WITH (\n            FORMAT_TYPE = DELTA\n        );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n--issue\nSELECT * \nFROM\n    OPENROWSET(\n        BULK 'vendor_unquoted.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n'\n    ) as [result];\n\n\n--running stored procedure\nEXEC sp_describe_first_result_set N'\nSELECT * \nFROM\n    OPENROWSET(\n        BULK ''vendor_unquoted.csv'',\n        DATA_SOURCE=''nyc_taxi_data_raw'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR='','',\n        ROWTERMINATOR=''\\n''\n    ) as [result];\n'\n\n--Solution 1 and 2: using escaped and quotes like(\"\")--double quotes \n\n--way-1\nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'vendor_escaped.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n',\n        ESCAPECHAR='*'  --ESCAPECHAR='\\*'\n    ) as [result];\n--way-2\n\nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'vendor.csv',  --double quote applied\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n',\n        FIELDQUOTE='\"'\n    ) as [result];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_usp_gold_trip_data_green_business_req_1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_defined_stored_procedure"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\nCREATE or ALTER PROCEDURE gold.usp_gold_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS \nBEGIN\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX)\n    \n    SET @create_sql_stmt='CREATE EXTERNAL TABLE gold.trip_data_green_'+@year+'_'+@month+'\nWITH\n    (\n        data_source=nyc_taxi_src,\n        location=''gold/trip_data_green/year='+@year+'/month='+@month+''',\n        file_format=parquet_file_format,\n    )\nAS\nwith cte AS\n(    \nselect j1.payment_type,j1.borough, j1.trip_date,j1.year,j1.month,j2.day_name,\ncase when day_name in(''Sunday'',''Saturday'') then ''Y'' else ''N'' end as trip_day_weekend_ind from \n(\nselect payment_type,borough,CAST(lpep_pickup_datetime AS DATE) as trip_date,year,month FROM\n(SELECT * FROM silver.vw_silver_trip_data_green) as t1\nJOIN\n(select * from silver.taxi_zone) as d\non t1.pu_location_id=d.location_id\n) as j1 \ninner join \n(select year as y,month as m, day_name,date from silver.calendar) as j2 \non j1.trip_date=j2.date\n)\n select borough,day_name,trip_date,year,month,\n count(*) as total_trip,\n count(case when payment_type=1 then 1 end) as total_credit_card_trips,\n count(case when payment_type=2 then 1 end) as total_cash_trips,\n trip_day_weekend_ind\nfrom cte\nwhere payment_type=1 or payment_type=2  \ngroup by borough,day_name,trip_date,year,month,trip_day_weekend_ind\nhaving year='+@year+'and month ='+@month\nEXEC sp_executesql @create_sql_stmt\n\nSET @drop_sql_stmt='DROP EXTERNAL TABLE gold.trip_data_green_'+@year+'_'+@month;\nEXEC sp_executesql @drop_sql_stmt\nEND\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_bronze_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\nIF OBJECT_ID('bronze.trip_data_green_csv') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_csv\nCREATE EXTERNAL TABLE nyc_taxi_ldw.bronze.trip_data_green_csv \n    (      vendor_id SMALLINT ,  --when creating external table .you do not have to give ordinal position \n           lpep_pickup_datetime DATETIME2(0) ,\n           lpep_dropoff_datetime DATETIME2(0) ,\n           store_and_fwd_flag VARCHAR(1500),\n           rate_code_id TINYINT,\n           pu_location_id INT,\n           do_location_id INT,\n           passenger_count TINYINT,\n           trip_distance FLOAT,\n           fare_amount FLOAT,\n           extra FLOAT,\n           mta_tax FLOAT,\n           tip_amount FLOAT,\n           tolls_amount FLOAT,\n           ehail_fee FLOAT,\n           improvement_surcharge FLOAT,\n           total_amounts FLOAT,\n           payment_type TINYINT,\n           trip_type  TINYINT,\n           congestion_surcharge FLOAT\n           )\n    WITH (\n        LOCATION = 'raw/trip_data_green_csv/**',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = cdv_file_format      \n    );\n--drop EXTERNAL TABLE nyc_taxi_ldw.bronze.trip_data_green_csv ;\nselect top 10 * from bronze.trip_data_green_csv;\n\n\n--we want to drop table if exists \n\n--way-1\nIF EXISTS(select * from sys.external_tables where name ='taxi_zone')\n    DROP EXTERNAL TABLE bronze.taxi_zone\n\n--way-2\nIF OBJECT_ID('bronze.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.taxi_zone\n\n--- using reject option \n---only available on paraser version 1.0 and for delimited text files (, or tab sperated values)\n\nIF NOT EXISTS(select * from sys.external_tables where name ='taxi_zone')\n    CREATE EXTERNAL TABLE  bronze.taxi_zone \n        (   location_id SMALLINT , --renaming column using ordinal position \n            borough VARCHAR(15) ,\n            zone VARCHAR(50) ,\n            service_zone VARCHAR(15) \n            )\n        WITH (\n            LOCATION = 'raw/taxi_zone.csv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = cdv_file_format_pv1,\n            REJECT_VALUE=10,\n            REJECTED_ROW_LOCATION='rejections/taxi_zone'\n\n        );\nSELECT * from bronze.taxi_zone; ---once we run this select query it will create folders \n--under rejections folder with records that have invalid formats/records. \n\n--create external table for calander file \nIF OBJECT_ID('bronze.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.calendar\nCREATE EXTERNAL TABLE  bronze.calendar \n        (   date_key INT ,\n           date DATE ,\n           year SMALLINT ,\n           month TINYINT ,\n           day TINYINT ,\n           day_name VARCHAR(20) ,\n           day_of_year SMALLINT ,\n           week_of_month TINYINT ,\n           week_of_year TINYINT ,\n           month_name VARCHAR(20),\n           year_month INT ,\n           year_week INT\n            )\n        WITH (\n            LOCATION = 'raw/calendar.csv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = cdv_file_format_pv1,\n            REJECT_VALUE=10,\n            REJECTED_ROW_LOCATION='rejections/calander'\n\n        );\nselect * from bronze.calendar;\n--create vendor table \nIF OBJECT_ID('bronze.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vendor\nCREATE EXTERNAL TABLE  bronze.vendor \n        (   vendor_id TINYINT,\n            vendor_name VARCHAR(50)\n            )\n        WITH (\n            LOCATION = 'raw/vendor.csv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = cdv_file_format_pv1,\n            REJECT_VALUE=10,\n            REJECTED_ROW_LOCATION='rejections/vendor'\n        );\nselect * from bronze.vendor;\n\n--create trip_type table \n\nIF OBJECT_ID('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type\nCREATE EXTERNAL TABLE  bronze.trip_type \n        (   \n           trip_type TINYINT,\n           trip_type_desc VARCHAR(50)\n        )\n        WITH (\n            LOCATION = 'raw/trip_type.tsv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = tsv_file_format, --working for parser version 2.0 but throwing error on paser version 1.0\n            REJECT_VALUE=10,\n            REJECTED_ROW_LOCATION='rejections/trip_type'\n\n        );\nselect * from bronze.trip_type;\n\n\n--create exteranl table for nyc_trip_data_parquet\n--when dealing with PARQUET we should not change the column name of table .otherwise it will display NULLs\nIF OBJECT_ID('bronze.trip_data_green_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_parquet\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet \n    (      VendorID INT ,  --when creating external table .you do not have to give ordinal position \n           lpep_pickup_datetime DATETIME2(0) ,\n           lpep_dropoff_datetime DATETIME2(0) ,\n           store_and_fwd_flag VARCHAR(1500),\n           RatecodeID INT,\n           PULocationID INT,  --do not changethe actual column name in parquet otherwise throws nulls.\n           DOLocationID INT,\n           passenger_count INT,\n           trip_distance FLOAT,\n           fare_amount FLOAT,\n           extra FLOAT,\n           mta_tax FLOAT,\n           tip_amount FLOAT,\n           tolls_amount FLOAT,\n           ehail_fee INT,\n           improvement_surcharge FLOAT,\n           total_amount FLOAT ,\n           payment_type TINYINT,\n           trip_type  TINYINT,\n           congestion_surcharge FLOAT\n           )\n    WITH (\n        LOCATION = 'raw/trip_data_green_parquet/**',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = parquet_file_format      \n    );\nselect TOP 100 * from nyc_taxi_ldw.bronze.trip_data_green_parquet where VendorID  is not null order by VendorID asc;\n\n--creating external table for trip_data_green_delta-delta \nIF OBJECT_ID('bronze.trip_data_green_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_delta\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta \n    (      VendorID INT ,  --when creating external table .you do not have to give ordinal position.\n    --do not changethe actual column name in delta otherwise throws nulls.\n           lpep_pickup_datetime DATETIME2(0) ,\n           lpep_dropoff_datetime DATETIME2(0) ,\n           store_and_fwd_flag VARCHAR(1500),\n           RatecodeID INT,\n           PULocationID INT,  --do not changethe actual column name in delta otherwise throws nulls.\n           DOLocationID INT,\n           passenger_count INT,\n           trip_distance FLOAT,\n           fare_amount FLOAT,\n           extra FLOAT,\n           mta_tax FLOAT,\n           tip_amount FLOAT,\n           tolls_amount FLOAT,\n           ehail_fee INT,\n           improvement_surcharge FLOAT,\n           total_amount FLOAT ,\n           payment_type TINYINT,\n           trip_type  TINYINT,\n           congestion_surcharge FLOAT\n           )\n    WITH (\n        --LOCATION = 'raw/trip_data_green_delta/**',-- we cannot query folders and subfolders in delta with wildcards\n        LOCATION = 'raw/trip_data_green_delta/',\n        DATA_SOURCE = nyc_taxi_src,\n        FILE_FORMAT = delta_file_format      \n    );\nselect top 10 * from nyc_taxi_ldw.bronze.trip_data_green_delta ;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explore_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\nSELECT * \nFROM\n    OPENROWSET(\n        BULK 'trip_type.tsv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR='\\t',\n        ROWTERMINATOR='\\n'\n    ) as [result];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_usp_gold_trip_data_green_business_req_2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_defined_stored_procedure"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\nCREATE or ALTER PROCEDURE gold.usp_gold_trip_data_green_1\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS \nBEGIN\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX)\n    \n    SET @create_sql_stmt='CREATE EXTERNAL TABLE gold.trip_data_green_'+@year+'_'+@month+'\nWITH\n    (\n        data_source=nyc_taxi_src,\n        location=''gold/trip_data_green_2/year='+@year+'/month='+@month+''',\n        file_format=parquet_file_format,\n    )\nAS\nwith cte AS\n(    \nselect j1.payment_type,j1.borough, \nj1.trip_date,j1.year,j1.month,\nj2.day_name,j1.trip_duration,j1.trip_distance,j1.fare_amount,j1.trip_type,\ncase when day_name in(''Sunday'',''Saturday'') then ''Y'' else ''N'' end as trip_day_weekend_ind from \n(\nselect payment_type,borough,CAST(lpep_pickup_datetime AS DATE) as trip_date,year,month,trip_distance,total_amount,fare_amount,\nDATEDIFF(MINUTE,lpep_pickup_datetime,lpep_dropoff_datetime) as trip_duration,trip_type\nFROM\n(SELECT * FROM silver.vw_silver_trip_data_green) as t1\nJOIN\n(select * from silver.taxi_zone) as d\non t1.pu_location_id=d.location_id\n) as j1 \njoin \n(select year as y,month as m, day_name,date from silver.calendar) as j2 \non j1.trip_date=j2.date\n)\nSELECT a1.year\n,a1.month \n,a1.borough\n,a1.trip_date\n,a1.day_name as trip_day\n,a1.trip_day_weekend_ind\n,SUM(case when b1.trip_type_desc=''Street-hail'' then 1 else 0 end) as street_hail_trip_count\n,SUM(case when b1.trip_type_desc=''Dispatch'' then 1 end) as dispatch_tirp_count\n,count(case when payment_type=1 then 1 end) as total_credit_card_trips\n,count(case when payment_type=2 then 1 end) as total_cash_trips\n,sum(a1.trip_duration) as total_trip_duration\n,sum(a1.trip_distance) as total_trip_distance \n,sum(a1.fare_amount) as total_fare_amount\nfrom cte as a1 join silver.trip_type as b1 on a1.trip_type=b1.trip_type\nwhere payment_type=1 or payment_type=2 \ngroup by a1.borough,\na1.trip_date,\na1.day_name,\na1.trip_day_weekend_ind,\na1.year,\na1.month\nhaving year='+@year+'and month ='+@month\nEXEC sp_executesql @create_sql_stmt\n\nSET @drop_sql_stmt='DROP EXTERNAL TABLE gold.trip_data_green_'+@year+'_'+@month;\nEXEC sp_executesql @drop_sql_stmt\nEND\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "--Views \n--way-1\n/*if  EXISTS(select * from sys.views where name='xyz')\n   DROP VIEW xyz\n;\n--way-2\nDROP VIEW IF EXISTS xyz;\n*/\nuse nyc_taxi_ldw\nGO\n/*\nIF EXISTS (SELECT * from sys.views where name ='vw_rate_code')\n    DROP VIEW bronze.vw_rate_code */\nIF OBJECT_ID('bronze.vw_rate_code') is not null \n       DROP VIEW bronze.vw_rate_code\nGO\n--DROP VIEW IF EXISTS bronze.vw_rate_code\n--GO\nCREATE VIEW bronze.vw_rate_code\n    AS\n    SELECT * FROM\n        OPENROWSET(\n         BULK 'raw/rate_code.json',\n            DATA_SOURCE='nyc_taxi_src',\n            FORMAT = 'CSV',\n            PARSER_VERSION = '1.0',\n        -- HEADER_ROW = TRUE,\n            FIELDTERMINATOR ='0x0b',\n            FIELDQUOTE = '0x0b',\n            ROWTERMINATOR='0x0b'\n        ) \n        with (jsondoc nvarchar(max)\n        )\n        as [result]\n        CROSS APPLY OPENJSON(jsondoc)\n        with (\n            rate_code_id SMALLINT,\n            rate_code VARCHAR(20)\n        )\nGO\nselect rate_code_id,rate_code from bronze.vw_rate_code\nGO\n\n--create view for payment_type json\n\nDROP VIEW IF EXISTS bronze.vw_payment_type\nGO\nCREATE VIEW bronze.vw_payment_type\n    AS\nSELECT payment_type_1,descriptions FROM\n    OPENROWSET(\n        BULK 'raw/payment_type.json',\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n       -- HEADER_ROW = TRUE,\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR='0x0a'\n    ) \n    with (jsondoc nvarchar(max)\n    )\n    as [result]\n    CROSS APPLY OPENJSON(jsondoc)\n    WITH(\n          payment_type_1 SMALLINT  '$.payment_type' ,\n         descriptions VARCHAR(20)  '$.payment_type_desc'  --rename column like this \n    )\nGO\nselect * from bronze.vw_payment_type\nGO\n--Partions puring\n--csv format \n\n\n\n--PARQUET format \nDROP VIEW IF EXISTS bronze.vw_trip_data_green_parquet\nGO\nCREATE VIEW bronze.vw_trip_data_green_parquet\nAS\nSELECT\n    *,result.filepath(1) as year,result.filepath(2) as month\nFROM\n    OPENROWSET(\n        BULK 'raw/trip_data_green_parquet/year=*/month=*/**',\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nGO\nselect count(*) from bronze.vw_trip_data_green_parquet where year=2020 and month =01\nGO\n\n--delta format \nDROP VIEW IF EXISTS bronze.vw_trip_data_green_delta\nGO\nCREATE VIEW bronze.vw_trip_data_green_delta\nAS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'raw/trip_data_green_delta/',\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'DELTA'  ---DELTA auto generates and add partions columns to table \n    ) AS [result]\nGO\n\nselect  count(*) from bronze.vw_trip_data_green_delta\nwhere year=2020 and month =01\nGO\n\n--csv format \n\nDROP VIEW IF EXISTS bronze.vw_trip_data_green_csv\nGO\nCREATE VIEW bronze.vw_trip_data_green_csv\nAS\nSELECT\n    *,result.filepath(1) as year,result.filepath(2) as month\nFROM\n    OPENROWSET(\n        BULK 'raw/trip_data_green_csv/year=*/month=*/**',\n        DATA_SOURCE='nyc_taxi_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',  -- manadatory parameter\n        HEADER_ROW=TRUE          -- manadatory parameter\n    ) AS [result]\nGO\nselect count(*) from bronze.vw_trip_data_green_csv where year=2020 and month =01\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_explore_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n--reading single line json \nSELECT CAST(JSON_VALUE(jsondoc,'$.payment_type') as SMALLINT) as payment_type,\nCAST(JSON_VALUE(jsondoc,'$.payment_type_desc') as VARCHAR(20)) as payment_type_desc\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR='0x0a'\n    ) \n    with (jsondoc nvarchar(max)\n    )\n    as [result]\n--running stored procedure for datatypes :\n\nEXEC sp_describe_first_result_set N'\nSELECT CAST(JSON_VALUE(jsondoc,''$.payment_type'') as SMALLINT) as payment_type,\nCAST(JSON_VALUE(jsondoc,''$.payment_type_desc'') as VARCHAR(20)) as payment_type_desc\nFROM\n    OPENROWSET(\n        BULK ''payment_type.json'',\n        DATA_SOURCE=''nyc_taxi_data_raw'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''1.0'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR =''0x0b'',\n        FIELDQUOTE = ''0x0b'',\n        ROWTERMINATOR=''0x0a''\n    ) \n    with (jsondoc nvarchar(max)\n    )\n    as [result]'\n\n-----OPENJSON() far better than JSON_VALUE() \nSELECT payment_type_1,descriptions FROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n       -- HEADER_ROW = TRUE,\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR='0x0a'\n    ) \n    with (jsondoc nvarchar(max)\n    )\n    as [result]\n    CROSS APPLY OPENJSON(jsondoc)\n    WITH(\n          payment_type_1 SMALLINT  '$.payment_type' ,\n         descriptions VARCHAR(20)  '$.payment_type_desc'  --rename column like this \n    )\n\n\n---explore payment type array (query json array)\n\n\n--explode json containing arrays \nuse nyc_taxi_discovery;\nSELECT payment_type,value as descriptions FROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n       -- HEADER_ROW = TRUE,\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR='0x0a'\n    ) \n    with (jsondoc nvarchar(max)\n    )\n    as [result]\n    CROSS APPLY OPENJSON(jsondoc)\n    with (\n        payment_type SMALLINT,\n        payment_type_desc nvarchar(max) as JSON\n    )\n    CROSS APPLY OPENJSON(payment_type_desc)---explode futher to get description into columns \n    with (\n          sub_type SMALLINT,\n          value VARCHAR(20)\n    )\n    \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_usp_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_defined_stored_procedure"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\nGO\nCREATE OR ALTER PROCEDURE silver.usp_taxi_zone\nAS\nBEGIN\n    if OBJECT_ID('silver.taxi_zone') is not null\n        DROP EXTERNAL TABLE silver.taxi_zone;\n    CREATE EXTERNAL TABLE silver.taxi_zone\n        WITH\n        (\n            data_source=nyc_taxi_src,\n            location='silver/taxi_zone',\n            file_format=parquet_file_format,\n        )\n    AS\n    select * FROM bronze.taxi_zone;\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_calander')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n--if EXISTS (select * from sys.external_tables where name ='calendar')\n  --  DROP EXTERNAL TABLE silver.calendar   --This is not a good way to drop table as schema info is missing .\nGo\nif OBJECT_ID('silver.calendar') is not null\n    DROP EXTERNAL TABLE silver.calendar\nGO\nCREATE EXTERNAL TABLE silver.calendar\n    WITH\n    (\n        data_source=nyc_taxi_src,\n        location='silver/calendar',\n        file_format=parquet_file_format,\n    )\nAS\nselect * FROM bronze.calendar\nGO\nselect * from silver.calendar\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "--Standard json reading same as multiline json\nuse nyc_taxi_discovery;\nSELECT * FROM\n    OPENROWSET(\n        BULK 'rate_code.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n       -- HEADER_ROW = TRUE,\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR='0x0b'\n    ) \n    with (jsondoc nvarchar(max)\n    )\n    as [result]\n    CROSS APPLY OPENJSON(jsondoc)\n    with (\n        rate_code_id SMALLINT,\n        rate_code VARCHAR(20)\n    )\n    \n    \n---Multiline json reading \nSELECT * FROM\n    OPENROWSET(\n        BULK 'rate_code_multi_line.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n       -- HEADER_ROW = TRUE,\n        FIELDTERMINATOR ='0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR='0x0b'\n    ) \n    with (jsondoc nvarchar(max)\n    )\n    as [result]\n    CROSS APPLY OPENJSON(jsondoc)\n    with (\n        rate_code_id SMALLINT,\n        rate_code VARCHAR(20)\n    )\n    ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_usp_create_silver_calander')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_defined_stored_procedure"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\nGO\nCREATE OR ALTER PROCEDURE silver.usp_calendar\nAS\nBEGIN\n    if OBJECT_ID('silver.calendar') is not null\n        DROP EXTERNAL TABLE silver.calendar;\n    CREATE EXTERNAL TABLE silver.calendar\n        WITH\n        (\n            data_source=nyc_taxi_src,\n            location='silver/calendar',\n            file_format=parquet_file_format,\n        )\n    AS\n    select * FROM bronze.calendar;\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGo\nif OBJECT_ID('silver.payment_type') is not null\n    DROP EXTERNAL TABLE silver.payment_type\nGO\nCREATE EXTERNAL TABLE silver.payment_type\n    WITH\n    (\n        data_source=nyc_taxi_src,\n        location='silver/payment_type',\n        file_format=parquet_file_format,\n    )\nAS\nselect * FROM bronze.vw_payment_type\nGO\nselect * from silver.payment_type\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_nyc_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- reading data from subfolder way-1\nuse nyc_taxi_discovery;\nSELECT\n    top 5 *  \nFROM\n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/trip_data_green_csv/year=*/month=*/*.*',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE\n    ) AS [result]\n--reading multiple folders in bulk synatx :\nSELECT  result.filename() as file_name,count(*) as records\nFROM\n    OPENROWSET(\n        BULK ('https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/trip_data_green_csv/year=2020/month=01/*.*',\n        'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/trip_data_green_csv/year=2021/month=01/*.*')\n    ,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE\n    ) AS [result]\ngroup by result.filename()\norder by result.filename();\n-- reading data from subfolders way-2\nSELECT\n    count(1) as records \nFROM\n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/trip_data_green_csv/**',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE\n    ) AS [result]\n---filename()\nSELECT \n    result.filename() as file_name,count(*) as records\nFROM \n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/trip_data_green_csv/**',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE\n    ) AS [result]\ngroup by result.filename()\norder by result.filename() desc\n;\n\n--taking only 2020 jan and 2021 jan \nSELECT \n    result.filename() as file_name,count(*) as records\nFROM \n    OPENROWSET(\n        BULK 'https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/trip_data_green_csv/**',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE\n    ) AS [result]\nwhere result.filename() in('green_tripdata_2021-01.csv','green_tripdata_2020-01.csv')\ngroup by result.filename()\norder by result.filename() desc\n;\n\n--filepath()\nSELECT \n    result.filename() as file_name,result.filepath() as file_path,count(*) as records\nFROM \n    OPENROWSET(\n        BULK 'trip_data_green_csv/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE\n    ) AS [result]\n--where result.filename() in('green_tripdata_2021-01.csv','green_tripdata_2020-01.csv')\ngroup by result.filename(),result.filepath()\norder by result.filename() desc,result.filepath() desc\n;\n\n---using wildcards under filepath()\nSELECT \n    result.filename() as file_name,result.filepath(1) as year,result.filepath(2) as month,result.filepath() as file_path,count(*) as records\nFROM \n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.*',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE\n    ) AS [result]\nwhere result.filepath(1)=2020 and result.filepath(2) in('06','07','08')\ngroup by result.filename(),result.filepath(),result.filepath(1),result.filepath(2)\norder by result.filename() desc,result.filepath(1) desc,result.filepath(2) desc,result.filepath() desc\n;\n--reading data using filepath and filename\nSELECT \n    top 10 *,result.filename() as file_name,result.filepath() as year\n    from\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.*',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW=TRUE\n    ) AS [result]\n\n--checking datatype \nEXEC sp_describe_first_result_set N'\nSELECT\n    top 5 *  \nFROM\n    OPENROWSET(\n        BULK ''https://synapseciurseadls.dfs.core.windows.net/nyc-taxi-data/raw/trip_data_green_csv/**'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW=TRUE\n    ) AS [result]'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_usp_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_defined_stored_procedure"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\nCREATE OR ALTER PROCEDURE silver.usp_payment_type\nAS\nBEGIN\n    if OBJECT_ID('silver.payment_type') is not null\n        DROP EXTERNAL TABLE silver.payment_type;\n    CREATE EXTERNAL TABLE silver.payment_type\n        WITH\n        (\n            data_source=nyc_taxi_src,\n            location='silver/payment_type',\n            file_format=parquet_file_format,\n        )\n    AS\n    select * FROM bronze.vw_payment_type;\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGo\nif OBJECT_ID('silver.rate_code') is not null\n    DROP EXTERNAL TABLE silver.rate_code\nGO\nCREATE EXTERNAL TABLE silver.rate_code\n    WITH\n    (\n        data_source=nyc_taxi_src,\n        location='silver/rate_code',\n        file_format=parquet_file_format,\n    )\nAS\nselect * FROM bronze.vw_rate_code\nGO\nselect * from silver.rate_code\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_nyc_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nuse nyc_taxi_discovery;\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n--reading all data from folders and subfolders --way -1\nSELECT\n    COUNT_BIG(1) as count_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n\n--select everyting inside folders and sub folders --way-2\nSELECT\n     TOP 100* \nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result] order by VendorID desc;\n--use filename() and filepath()\n\nSELECT\n    TOP 100 VendorID,result.filepath(1) as year,result.filepath(2) as month  --,result.filename() as filenane\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n    where result.filepath(1)=2021 and result.filepath(2)='02';\n\n--year wise record count \n\nSELECT\n    count(*) as year_wise_record_count,result.filepath(1) as year--,result.filename() as filenane\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n    group by result.filepath(1);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_usp_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_defined_stored_procedure"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\nCREATE OR ALTER PROCEDURE silver.usp_rate_code\nAS\nBEGIN\n    if OBJECT_ID('silver.rate_code') is not null\n        DROP EXTERNAL TABLE silver.rate_code;\n    CREATE EXTERNAL TABLE silver.rate_code\n        WITH\n        (\n            data_source=nyc_taxi_src,\n            location='silver/rate_code',\n            file_format=parquet_file_format,\n        )\n    AS\n    select * FROM bronze.vw_rate_code;\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n--if EXISTS (select * from sys.external_tables where name ='taxi_zone')\n --   DROP EXTERNAL TABLE silver.taxi_zone\nif OBJECT_ID('silver.taxi_zone') is not null\n    DROP EXTERNAL TABLE silver.taxi_zone\nGO\nCREATE EXTERNAL TABLE silver.taxi_zone\n    WITH\n    (\n        data_source=nyc_taxi_src,\n        location='silver/taxi_zone',\n        file_format=parquet_file_format,\n    )\nAS\nselect * FROM bronze.taxi_zone\nGO\nselect * from silver.taxi_zone\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_explore_nyc_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n--reading delta\nSELECT\n     top 10 *\nFROM\n    OPENROWSET(\n        --BULK 'trip_data_green_delta/**',-- we cannot query folders and subfolders\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result]\n\n--select only req, columns \nSELECT\n     top 10 *\nFROM\n    OPENROWSET(\n        --BULK 'trip_data_green_delta/**',-- we cannot query folders and subfolders\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) \n    with(\n           tip_amount float,\n           trip_type int\n    ) as trip_data;\n\n\n\n--select only req, columns now we are inculding partision column \nSELECT\n     top 10 *\nFROM\n    OPENROWSET(\n        --BULK 'trip_data_green_delta/**',-- we cannot query folders and subfolders\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) \n    with(\n           tip_amount float,\n           trip_type int,\n           year VARCHAR(4),\n           month VARCHAR(2)\n    ) as trip_data;\n\n\n--query on partision column \n\n\n--query on partition columns to redcue query run time\nSELECT\n     count(DISTINCT payment_type)\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) as trip_data;\n\nSELECT\n     count(DISTINCT payment_type)\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) as trip_data\n    where year=2020 and month =01\n    ;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_usp_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_defined_stored_procedure"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\nCREATE OR ALTER PROCEDURE silver.usp_trip_type\nAS\nBEGIN\n    if OBJECT_ID('silver.trip_type') is not null\n        DROP EXTERNAL TABLE silver.trip_type;\n    CREATE EXTERNAL TABLE silver.trip_type\n        WITH\n        (\n            data_source=nyc_taxi_src,\n            location='silver/trip_type',\n            file_format=parquet_file_format,\n        )\n    AS\n    select * FROM bronze.trip_type;\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CostPerQuerysql')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"content": {
					"query": "/*https://github.com/microsoft/Azure_Synapse_Toolbox/blob/master/TSQL_Queries/ServerlessSql/CostPerQuery.sql*/\nSELECT \n    ERH.query_text as [command],\n    ERH.status as [status],\n    ERH.login_name as [login_name],\n    ERH.start_time as [start_time],\n    ERH.end_time as [end_time],\n    ERH.total_elapsed_time_ms as [duration_ms],\n    /* Data processed =  data scanned + data moved + data written */\n    ERH.data_processed_mb as [data_processed_MB],\n    /* Cost management for serverless SQL pool\n    The amount of data processed is rounded up to the nearest MB per query. \n    Each query has a minimum of 10 MB of data processed. */\n    CASE WHEN ERH.data_processed_mb < 10 THEN 10 ELSE ERH.data_processed_mb END as [data_pricing_MB],\n    cast(ERH.total_elapsed_time_ms/1000.0 as decimal(12,2)) as [duration_sec],\n    /*$5 per 1TB scan, minimum 10M */\n    cast((CASE WHEN ERH.data_processed_mb < 10 THEN 10 ELSE ERH.data_processed_mb END)*5/100000.0 as decimal(19,7))  as cost_in_$,\n    ERH.command as [statement]\nFROM sys.dm_exec_requests_history ERH\nORDER BY ERH.start_time desc\n--order by cast((CASE WHEN ERH.data_processed_mb < 10 THEN 10 ELSE ERH.data_processed_mb END)*5/100000.0 as decimal(19,7)) desc",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "use nyc_taxi_ldw;\n\nselect distinct year,month from bronze.vw_trip_data_green_csv;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TotalCostPerQuerysql')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"content": {
					"query": "SELECT \n    CAST([end_time] AS DATE) RunTime,\n    COUNT(*) Queries,\n    AVG([data_processed_MB]) AvgDataProcessedMB,\n    SUM([data_processed_MB]) TotalDataProcossedMB,\n    SUM([cost_in_$]) TotaCostIn$,\n    AVG([cost_in_$]) AvgCostIn$\nFROM \n(\nSELECT \n    ERH.query_text as [command],\n    ERH.status as [status],\n    ERH.login_name as [login_name],\n    ERH.start_time as [start_time],\n    ERH.end_time as [end_time],\n    ERH.total_elapsed_time_ms as [duration_ms],\n    /* Data processed =  data scanned + data moved + data written */\n    ERH.data_processed_mb as [data_processed_MB],\n    /* Cost management for serverless SQL pool\n    The amount of data processed is rounded up to the nearest MB per query. \n    Each query has a minimum of 10 MB of data processed. */\n    CASE WHEN ERH.data_processed_mb < 10 THEN 10 ELSE ERH.data_processed_mb END as [data_pricing_MB],\n    cast(ERH.total_elapsed_time_ms/1000.0 as decimal(12,2)) as [duration_sec],\n    /*$5 per 1TB scan, minimum 10M */\n    cast((CASE WHEN ERH.data_processed_mb < 10 THEN 10 ELSE ERH.data_processed_mb END)*5/100000.0 as decimal(19,7))  as cost_in_$,\n    ERH.command as [statement]\nFROM sys.dm_exec_requests_history ERH\n) X\nGROUP BY\n    CAST([end_time] AS DATE) \nORDER BY    1 DESC",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/set serverless cost_control')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"content": {
					"query": "select * from sys.dm_external_data_processed;\nselect * from sys.configurations\nwhere name like 'data processed%';\n\nsp_set_data_processed_limit\n        @type=N'monthly',\n        @limit_tb=2;\n\nsp_set_data_processed_limit\n        @type=N'weekly',\n        @limit_tb=1;\n        \nsp_set_data_processed_limit\n        @type=N'daily',\n        @limit_tb=1;\n        \n        ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}